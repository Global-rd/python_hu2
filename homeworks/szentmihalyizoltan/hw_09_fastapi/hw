from fastapi import FastAPI, HTTPException, Depends
from pydantic import BaseModel, Field
from typing import Optional, Dict
from uuid import uuid1, UUID

app = FastAPI(title="Webshop")

# Data models
class Product(BaseModel):
    id: UUID
    item_name: str
    quantity: int
    price: int
    category: Optional[str] = None

class ProductCreate(BaseModel):
    item_name: str
    quantity: int
    price: int
    category: Optional[str] = None

# In-memory database simulation
db: Dict[UUID, Product] = {}

# Dependency to simulate database access (for extensibility)
def get_db() -> Dict[UUID, Product]:
    return db

# CRUD Operations
def list_all_products(db: Dict[UUID, Product]) -> list[Product]:
    return list(db.values())

def find_product_by_id(product_id: UUID, db: Dict[UUID, Product]) -> Product:
    product = db.get(product_id)
    if not product:
        raise HTTPException(status_code=404, detail="There is no such product.")
    return product

def add_new_product(product_data: ProductCreate, db: Dict[UUID, Product]) -> Product:
    new_id = uuid1()
    new_product = Product(id=new_id, **product_data.dict())
    db[new_id] = new_product
    return new_product

def update_existing_product(product_id: UUID, product_data: ProductCreate, db: Dict[UUID, Product]) -> Product:
    if product_id not in db:
        raise HTTPException(status_code=404, detail="There is no such product.")
    updated_product = Product(id=product_id, **product_data.dict())
    db[product_id] = updated_product
    return updated_product

def delete_product_by_id(product_id: UUID, db: Dict[UUID, Product]) -> None:
    if product_id not in db:
        raise HTTPException(status_code=404, detail="There is no such product.")
    del db[product_id]

# API Endpoints
@app.get("/products", response_model=list[Product])
def list_products(db: Dict[UUID, Product] = Depends(get_db)):
    return list_all_products(db)

@app.get("/products/{product_id}", response_model=Product)
def get_product(product_id: UUID, db: Dict[UUID, Product] = Depends(get_db)):
    return find_product_by_id(product_id, db)

@app.post("/products", response_model=Product)
def create_product(product: ProductCreate, db: Dict[UUID, Product] = Depends(get_db)):
    return add_new_product(product, db)

@app.put("/products/{product_id}", response_model=Product)
def update_product(product_id: UUID, updated_product: ProductCreate, db: Dict[UUID, Product] = Depends(get_db)):
    return update_existing_product(product_id, updated_product, db)

@app.delete("/products/{product_id}")
def delete_product(product_id: UUID, db: Dict[UUID, Product] = Depends(get_db)):
    delete_product_by_id(product_id, db)
    return {"message": "Product deleted"}